<?php
// $Id$

/**
 * @file
 * Unit tests for Publish Content module.
 * prerequesite: make sure that 'authenticated user' does not have any access like
 *               'un/publish [content type] content'
 *
 * @todo add test for un/publish *all* content
 *
 * @note: We test to ensure we are not messing up with the default Drupal acces for view node.
 */
class PublishContentWebCaseTest extends DrupalWebTestCase {

  /**
   * Drupal SimpleTest method: return metadata about the test.
   */
  function getInfo() {
    return array(
      'name'  => t('Publish Content: access control'),
      'description'  => t('Executes test suite for Publish Content module.'),
      'group' => t('Publish Content'),
    );
  }

  function setUp() {
    parent::setUp('publishcontent');
  }

  function publishcontent_do_operation($nid, $op, $expected_status, $msg = NULL) {
    $this->drupalGet("node/$nid/$op");
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, $expected_status, $msg);
  }

  function assert_access_node($node, $msg = NULL) {
    $this->drupalGet('node/'. $node->nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title . ' | '. variable_get('site_name', 'Drupal'), $msg);
  }

  function assert_access_denied($url, $msg = NULL) {
    $this->drupalGet($url);
    $this->assertResponse(403);
    $this->assertText('Access denied' . ' | '. variable_get('site_name', 'Drupal'), $msg);
  }

  /**
   * Test the access for the owner of a node without the permission to
   * publish or unpublish. 
   *
   * @note: node's owner can see it even if unpublished by default in Drupal
   */
  function testNoPermissionByOwner() {
    // Prepare a user to do the stuff
    $web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($web_user);
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );

    $this->assert_access_denied("node/{$node->nid}/publish", "no publish permission --> access denied");    $this->assert_access_denied("node/{$node->nid}/unpublish", "no unpublish permission --> access denied");
    $this->assert_access_node($node, 'node MUST BE still viewable by everybody if published');

    // unpublish node
    $node->status = 0;
    node_save($node);


    $this->assert_access_denied("node/{$node->nid}/publish", "no publish permission --> access denied");
    $this->assert_access_denied("node/{$node->nid}/unpublish", "no unpublish permission --> access denied");
    $this->assert_access_node($node, 'node MUST BE viewable if unpublished');
  }

  function testNoPermissionAndNotOwner() {
    $owner = $this->drupalCreateUser(array('access content'));
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => $owner->uid,
        'status' => 1,
      )
    );

    $web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($web_user);


    $this->assert_access_denied("node/{$node->nid}/publish", "no publish permission --> access denied");    $this->assert_access_denied("node/{$node->nid}/unpublish", "no unpublish permission --> access denied");
    $this->assert_access_node($node, 'node MUST BE still viewable by everybody if published');

    // unpublish node
    $node->status = 0;
    node_save($node);


    $this->assert_access_denied("node/{$node->nid}/publish", "no publish permission --> access denied");    $this->assert_access_denied("node/{$node->nid}/unpublish", "no unpublish permission --> access denied");
    $this->assert_access_denied('node/'. $node->nid, 'node MUST BE not viewable if unpublished');
  }


  function testDoPublishAndUnpublishByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUser(array('un/publish '. $type .' content'));
    $this->drupalLogin($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );

    $this->publishcontent_do_operation($node->nid, 'publish', 1, 'node should be still published');

    $this->publishcontent_do_operation($node->nid, 'unpublish', 0, 'node should be now unpublished');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message not working for unpublish.');

    $this->assert_access_node($node, 'node MUST BE viewable even if unpublished');

    $this->publishcontent_do_operation($node->nid, 'unpublish', 0, 'node should be still unpublished');

    $this->publishcontent_do_operation($node->nid, 'publish', 1, 'node should be now published');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message not working for publish.');
  }



  function testDoPublishAndUnpublishNotByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUser(array('un/publish '. $type .' content'));
    $this->drupalLogin($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => 0,
        'status' => 1,
      )
    );

    $this->publishcontent_do_operation($node->nid, 'publish', 1, 'node should be still published');

    $this->publishcontent_do_operation($node->nid, 'unpublish', 0, 'node should be now unpublished');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message not working for unpublish.');

    $this->assert_access_node($node, 'node MUST BE viewable even if unpublished');

    $this->publishcontent_do_operation($node->nid, 'unpublish', 0, 'node should be still unpublished');

    $this->publishcontent_do_operation($node->nid, 'publish', 1, 'node should be now published');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message not working for publish.');
  }
}
