<?php
// $Id$

/**
 * @file
 * Unit tests for Publish Content module.
 * prerequesite: make sure that 'authenticated user' does not have any access like
 *               'un/publish [content type] content'
 *
 * @todo add test for un/publish *all* content
 */
class PublishContentWebCaseTest extends DrupalWebTestCase {

  /**
   * Drupal SimpleTest method: return metadata about the test.
   */
  function getInfo() {
    return array(
      'name'  => t('Publish Content: access control'),
      'description'  => t('Executes test suite for Publish Content module.'),
      'group' => t('Publish Content'),
    );
  }

  function setUp() {
    parent::setUp('publishcontent');
  }

  /**
   * test the access for the owner of a node without the permission to in/publish
   * owner of a node can see it even if unpublished by default in Drupal
   */
  function testNoPermissionByOwner() {
    // Prepare a user to do the stuff
    $web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($web_user);
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    // unpublish node
    $node->status = 0;
    node_save($node);


    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet('node/'. $nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title . ' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed by owner even if unpublished');
  }

  function testNoPermissionAndNotOwner() {
    $owner = $this->drupalCreateUser(array('access content'));
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => $owner->uid,
        'status' => 1,
      )
    );

    $web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($web_user);

    $nid = $node->nid;

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet('node/'. $nid);
    $this->assertTitle($node->title . ' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed even if unpublished');

    // unpublish node
    $node->status = 0;
    node_save($node);


    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet('node/'. $nid);
    $this->assertText('Access denied' . ' | '. variable_get('site_name', 'Drupal'),
                      'node MUST BE not viewable if unpublished');
  }


  function testDoPublishAndUnpublishByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUser(array('un/publish '. $type .' content'));
    $this->drupalLogin($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node should be still published');

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message not working for unpublish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node should be now unpublished');

    $html = $this->drupalGet('node/'. $nid);
    $this->assertTitle($node->title . ' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed even if unpublished');

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node should be still unpublished');

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message not working for publish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node should be now published');
  }



  function testDoPublishAndUnpublishNotByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUser(array('un/publish '. $type .' content'));
    $this->drupalLogin($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => 0,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node should be still published');

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message working for unpublish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node should be now unpublished');

    $html = $this->drupalGet('node/'. $nid);
    $this->assertTitle($node->title . ' | '. variable_get('site_name', 'Drupal'),
                       'node MUST BE viewable even if unpublished');

    $html = $this->drupalGet('node/'. $nid .'/unpublish');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node should be still unpublished');

    $html = $this->drupalGet('node/'. $nid .'/publish');
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message working for publish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node should be now published');
  }
}
