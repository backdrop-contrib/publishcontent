<?php
// $Id$

/**
 * @file
 * Unit tests for Publish Content module.
 * prerequesite: make sure that 'authenticated user' does not have any access like
 *               'un/publish [content type] content'
 *
 * @todo add test for un/publish *all* content
 */
class PublishContentWebCaseTest extends DrupalTestCase {

  /**
   * Drupal SimpleTest method: return metadata about the test.
   */
  function get_info() {
    return array(
      'name'  => t('Publish Content: access control'),
      'desc'  => t('Executes test suite for Publish Content module.'),
      'group' => t('Publish Content module'),
    );
  }

  function setUp() {
    parent::setUp();

    $this->drupalModuleEnable('publishcontent');
  }

  function testNoPermissionByOwner() {
    // Prepare a user to do the stuff
    $web_user = $this->drupalCreateUserRolePerm();
    $this->drupalLoginUser($web_user);
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    // unpublish node
    $node->status = 0;
    node_save($node);


    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet(url('node/'. $nid, NULL, NULL, TRUE));
    $this->assertTitle($node->title .' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed by owner even if unpublished');
  }

  function testNoPermissionAndNotOwner() {
    // Prepare a user to do the stuff
    $web_user = $this->drupalCreateUserRolePerm();
    $this->drupalLoginUser($web_user);
    $node = $this->drupalCreateNode(
      array(
        'type' => 'page',
        'uid' => 0,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1);

    $html = $this->drupalGet(url('node/'. $nid, NULL, NULL, TRUE));
    $this->assertTitle($node->title .' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed even if unpublished');

    // unpublish node
    $node->status = 0;
    node_save($node);


    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0);

    $html = $this->drupalGet(url('node/'. $nid, NULL, NULL, TRUE));
    $this->assertText('Access denied | '. variable_get('site_name', 'Drupal'),
                      'node MUST BE not viewable if unpublished');
  }


  function testDoPublishAndUnpublishByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUserRolePerm(array('un/publish '. $type .' content', 'access content'));
    $this->drupalLoginUser($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => $web_user->uid,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node is still published');

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message working for unpublish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node is now unpublished');

    $html = $this->drupalGet(url('node/'. $nid, NULL, NULL, TRUE));
    $this->assertTitle($node->title .' | '. variable_get('site_name', 'Drupal'),
                       'node can be viewed even if unpublished');

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node is still unpublished');

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message working for publish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node is now published');
  }


  function testDoPublishAndUnpublishNotByNodeOwner() {
    $type = 'page';
    $web_user = $this->drupalCreateUserRolePerm(array('un/publish '. $type .' content', 'access content'));
    $this->drupalLoginUser($web_user);


    $node = $this->drupalCreateNode(
      array(
        'type' => $type,
        'uid' => 0,
        'status' => 1,
      )
    );
    $nid = $node->nid;

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node is still published');

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, FALSE),
                      'drupal_set_message working for unpublish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node is now unpublished');

    $html = $this->drupalGet(url('node/'. $nid, NULL, NULL, TRUE));
    $this->assertTitle($node->title .' | '. variable_get('site_name', 'Drupal'),
                       'node MUST BE viewable even if unpublished');

    $html = $this->drupalGet(url('node/'. $nid .'/unpublish', NULL, NULL, TRUE));
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 0, 'node is still unpublished');

    $html = $this->drupalGet(url('node/'. $nid .'/publish', NULL, NULL, TRUE));
    $this->assertText(_publishcontent_get_message($node->nid, $node->title, TRUE),
                      'drupal_set_message working for publish.');
    $node = node_load($nid, NULL, TRUE);
    $this->assertEqual($node->status, 1, 'node is now published');
  }


  /**
   * HACK: taken from simpletest for Drupal 6
   * Creates a node based on default settings.
   *
   * @param $settings
   *   An associative array of settings to change from the defaults, keys are
   *   node properties, for example 'body' => 'Hello, world!'.
   * @return object Created node object.
   */
  function drupalCreateNode($settings = array()) {
    // Populate defaults array
    $defaults = array(
      'body'      => $this->randomName(32),
      'title'     => $this->randomName(8),
      'comment'   => 2,
      'changed'   => time(),
      'format'    => FILTER_FORMAT_DEFAULT,
      'moderate'  => 0,
      'promote'   => 0,
      'revision'  => 1,
      'log'       => '',
      'status'    => 1,
      'sticky'    => 0,
      'type'      => 'page',
      'revisions' => NULL,
      'taxonomy'  => NULL,
    );
    $defaults['teaser'] = $defaults['body'];
    // If we already have a node, we use the original node's created time, and this
    if (isset($defaults['created'])) {
      $defaults['date'] = format_date($defaults['created'], 'custom', 'Y-m-d H:i:s O');
    }
    if (empty($settings['uid'])) {
      global $user;
      $defaults['uid'] = $user->uid;
    }
    $node = ($settings + $defaults);
    $node = (object)$node;

    node_save($node);

    // small hack to link revisions to our test user
    db_query('UPDATE {node_revisions} SET uid = %d WHERE vid = %d', $node->uid, $node->vid);
    return $node;
  }
}
